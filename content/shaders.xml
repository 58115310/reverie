<shaders>
    <shader name="Reverie Delusion Pipe">
        <parameters>
            <param name="Offset" type="float"/>
            <param name="Alpha" type="float"/>
        </parameters>
        <vertex><![CDATA[
            attribute vec3 Position;
            attribute vec4 Color;
            attribute vec2 TexCoord;
            attribute vec4 RenderData;
            attribute float Scale;

            attribute float Offset;
            attribute float Alpha;
            
            varying float OffsetOut;
            varying float AlphaOut;
            varying vec4 Color0;
            varying vec2 TexCoord0;

            uniform mat4 Transform;
            void main(void)
            {
                OffsetOut = Offset;
                AlphaOut = Alpha;
                Color0 = Color;
                TexCoord0 = TexCoord;
                gl_Position = Transform * vec4(Position.xyz, 1.0);
            }
        ]]></vertex>
        <fragment><![CDATA[
            varying lowp vec4 Color0;
            varying mediump vec2 TexCoord0;
            varying lowp float OffsetOut;
            varying lowp float AlphaOut;
            uniform sampler2D Texture0;

            vec4 MaxColor(vec4 col1, vec4 col2)
            {
                //return max(col1.rgba, col2.rgba);
                return min(vec4(1,1,1,1), col1.rgba+ col2.rgba);
            }
            float lerp(float a, float b, float t)
            {
                return a * (1-t) + b*t;
            }

            void main(void)
            {
                vec4 Color = Color0 * texture2D(Texture0, TexCoord0);
                float alpha = 1 * AlphaOut;
                if (alpha > 0) {
                    float offset = 0.05 * OffsetOut;
                    vec4 down = Color0 * texture2D(Texture0, TexCoord0 + vec2(0, offset));
                    vec4 up = Color0 * texture2D(Texture0, TexCoord0 + vec2(0, -offset));
                    vec4 right = Color0 * texture2D(Texture0, TexCoord0 + vec2(offset, 0));
                    vec4 left = Color0 * texture2D(Texture0, TexCoord0 + vec2(-offset, 0));
                    float colorWeight = lerp(1, 0.2, alpha);
                    float offsetWeight = lerp( 0, 0.2, alpha);
                    Color = (down * offsetWeight + up * offsetWeight + right * offsetWeight + left * offsetWeight + Color * colorWeight);
                }
                gl_FragColor = Color;
            }
        ]]></fragment>
    </shader>
    <shader name="Reverie White Screen">
        <parameters>
            <param name="Alpha" type="float"/>
        </parameters>
        <vertex><![CDATA[
            attribute vec3 Position;
            attribute vec4 Color;
            attribute vec2 TexCoord;
            attribute vec4 RenderData;
            attribute float Scale;

            attribute float Alpha;

            varying vec4 RenderDataOut;
            varying float ScaleOut;
            varying vec4 Color0;
            varying vec2 TexCoord0;
            
            varying float AlphaOut;

            uniform mat4 Transform;
            void main(void)
            {
                AlphaOut = Alpha;
                Color0 = Color;
                TexCoord0 = TexCoord;
                gl_Position = Transform * vec4(Position.xyz, 1.0);
            }
        ]]></vertex>
        <fragment><![CDATA[
            varying lowp vec4 Color0;
            varying mediump vec2 TexCoord0;
            varying lowp vec4 RenderDataOut;
            varying lowp float ScaleOut;
            uniform sampler2D Texture0;
            
            varying lowp float AlphaOut;
            void main(void)
            {
                vec4 Color = Color0 * texture2D(Texture0, TexCoord0);
                float a = AlphaOut;
                if (a > 1){
                    a = 1;
                }
                else if (a < 0){
                    a = 0;
                }
                Color.rgb += a;
                gl_FragColor = Color;
            }
        ]]></fragment>
    </shader>
    <shader name="Reverie Black Screen">
        <parameters>
            <param name="Alpha" type="float"/>
        </parameters>
        <vertex><![CDATA[
            attribute vec3 Position;
            attribute vec4 Color;
            attribute vec2 TexCoord;
            attribute vec4 RenderData;
            attribute float Scale;

            attribute float Alpha;
            
            varying vec4 RenderDataOut;
            varying float ScaleOut;
            varying vec4 Color0;
            varying vec2 TexCoord0;
            
            varying float AlphaOut;

            uniform mat4 Transform;
            void main(void)
            {
                AlphaOut = Alpha;
                Color0 = Color;
                TexCoord0 = TexCoord;
                gl_Position = Transform * vec4(Position.xyz, 1.0);
            }
        ]]></vertex>
        <fragment><![CDATA[
            varying lowp vec4 Color0;
            varying mediump vec2 TexCoord0;
            varying lowp vec4 RenderDataOut;
            varying lowp float ScaleOut;
            uniform sampler2D Texture0;

            varying lowp float AlphaOut;
            void main(void)
            {
                vec4 Color = Color0 * texture2D(Texture0, TexCoord0);
                float a = AlphaOut;
                if (a > 1){
                    a = 1;
                }
                else if (a < 0){
                    a = 0;
                }
                Color.rgb *= 1-a;
                gl_FragColor = Color;
            }
        ]]></fragment>
    </shader>
    <shader name="HUD Hack">
        <vertex><![CDATA[
            attribute vec3 Position;
            attribute vec4 Color;
            attribute vec2 TexCoord;
            attribute vec4 RenderData;
            attribute float Scale;
            
            varying vec4 Color0;
            varying vec2 TexCoord0;

            uniform mat4 Transform;
            void main(void)
            {
                Color0 = Color;
                TexCoord0 = TexCoord;
                gl_Position = Transform * vec4(Position.xyz, 1.0);
            }
        ]]></vertex>
        <fragment><![CDATA[
            varying lowp vec4 Color0;
            varying mediump vec2 TexCoord0;
            uniform sampler2D Texture0;
            void main(void)
            {
                vec4 Color = Color0 * texture2D(Texture0, TexCoord0);
                gl_FragColor = Color;
            }
        ]]></fragment>
    </shader>
</shaders>